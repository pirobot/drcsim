/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/srv/AtlasFilters.srv */
#ifndef ATLAS_MSGS_SERVICE_ATLASFILTERS_H
#define ATLAS_MSGS_SERVICE_ATLASFILTERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasFiltersRequest_ {
  typedef AtlasFiltersRequest_<ContainerAllocator> Type;

  AtlasFiltersRequest_()
  : coef_a()
  , coef_b()
  , filter_velocity(false)
  , filter_position(false)
  {
  }

  AtlasFiltersRequest_(const ContainerAllocator& _alloc)
  : coef_a(_alloc)
  , coef_b(_alloc)
  , filter_velocity(false)
  , filter_position(false)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coef_a_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  coef_a;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coef_b_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  coef_b;

  typedef uint8_t _filter_velocity_type;
  uint8_t filter_velocity;

  typedef uint8_t _filter_position_type;
  uint8_t filter_position;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasFiltersRequest
typedef  ::atlas_msgs::AtlasFiltersRequest_<std::allocator<void> > AtlasFiltersRequest;

typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest> AtlasFiltersRequestPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest const> AtlasFiltersRequestConstPtr;



template <class ContainerAllocator>
struct AtlasFiltersResponse_ {
  typedef AtlasFiltersResponse_<ContainerAllocator> Type;

  AtlasFiltersResponse_()
  : success(false)
  , status_message()
  {
  }

  AtlasFiltersResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , status_message(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status_message;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasFiltersResponse
typedef  ::atlas_msgs::AtlasFiltersResponse_<std::allocator<void> > AtlasFiltersResponse;

typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersResponse> AtlasFiltersResponsePtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersResponse const> AtlasFiltersResponseConstPtr;


struct AtlasFilters
{

typedef AtlasFiltersRequest Request;
typedef AtlasFiltersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AtlasFilters
} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271d7f8e4a68b57888389ab6ce3a31b9";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x271d7f8e4a68b578ULL;
  static const uint64_t static_value2 = 0x88389ab6ce3a31b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasFiltersRequest";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64[] coef_a\n\
\n\
\n\
float64[] coef_b\n\
\n\
\n\
\n\
bool filter_velocity\n\
bool filter_position\n\
\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ec6f3eff0161f4257b808b12bc830c2";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
  static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasFiltersResponse";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string status_message\n\
\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.coef_a);
    stream.next(m.coef_b);
    stream.next(m.filter_velocity);
    stream.next(m.filter_position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasFiltersRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.status_message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasFiltersResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<atlas_msgs::AtlasFilters> {
  static const char* value() 
  {
    return "c10edfabe7696f91f51fb8486565f5ac";
  }

  static const char* value(const atlas_msgs::AtlasFilters&) { return value(); } 
};

template<>
struct DataType<atlas_msgs::AtlasFilters> {
  static const char* value() 
  {
    return "atlas_msgs/AtlasFilters";
  }

  static const char* value(const atlas_msgs::AtlasFilters&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c10edfabe7696f91f51fb8486565f5ac";
  }

  static const char* value(const atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasFilters";
  }

  static const char* value(const atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c10edfabe7696f91f51fb8486565f5ac";
  }

  static const char* value(const atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasFilters";
  }

  static const char* value(const atlas_msgs::AtlasFiltersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ATLAS_MSGS_SERVICE_ATLASFILTERS_H

