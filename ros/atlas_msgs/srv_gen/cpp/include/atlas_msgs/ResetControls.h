/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/srv/ResetControls.srv */
#ifndef ATLAS_MSGS_SERVICE_RESETCONTROLS_H
#define ATLAS_MSGS_SERVICE_RESETCONTROLS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "atlas_msgs/AtlasCommand.h"



namespace atlas_msgs
{
template <class ContainerAllocator>
struct ResetControlsRequest_ {
  typedef ResetControlsRequest_<ContainerAllocator> Type;

  ResetControlsRequest_()
  : reset_bdi_controller(false)
  , reset_pid_controller(false)
  , reload_pid_from_ros(false)
  , atlas_command()
  {
  }

  ResetControlsRequest_(const ContainerAllocator& _alloc)
  : reset_bdi_controller(false)
  , reset_pid_controller(false)
  , reload_pid_from_ros(false)
  , atlas_command(_alloc)
  {
  }

  typedef uint8_t _reset_bdi_controller_type;
  uint8_t reset_bdi_controller;

  typedef uint8_t _reset_pid_controller_type;
  uint8_t reset_pid_controller;

  typedef uint8_t _reload_pid_from_ros_type;
  uint8_t reload_pid_from_ros;

  typedef  ::atlas_msgs::AtlasCommand_<ContainerAllocator>  _atlas_command_type;
   ::atlas_msgs::AtlasCommand_<ContainerAllocator>  atlas_command;


  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ResetControlsRequest
typedef  ::atlas_msgs::ResetControlsRequest_<std::allocator<void> > ResetControlsRequest;

typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest> ResetControlsRequestPtr;
typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest const> ResetControlsRequestConstPtr;



template <class ContainerAllocator>
struct ResetControlsResponse_ {
  typedef ResetControlsResponse_<ContainerAllocator> Type;

  ResetControlsResponse_()
  : success(false)
  , status_message()
  {
  }

  ResetControlsResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , status_message(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status_message;


  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ResetControlsResponse
typedef  ::atlas_msgs::ResetControlsResponse_<std::allocator<void> > ResetControlsResponse;

typedef boost::shared_ptr< ::atlas_msgs::ResetControlsResponse> ResetControlsResponsePtr;
typedef boost::shared_ptr< ::atlas_msgs::ResetControlsResponse const> ResetControlsResponseConstPtr;


struct ResetControls
{

typedef ResetControlsRequest Request;
typedef ResetControlsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ResetControls
} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e1b433362be65dc5221281baedaa897";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2e1b433362be65dcULL;
  static const uint64_t static_value2 = 0x5221281baedaa897ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/ResetControlsRequest";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
bool reset_bdi_controller\n\
bool reset_pid_controller\n\
bool reload_pid_from_ros\n\
atlas_msgs/AtlasCommand atlas_command\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasCommand\n\
# Joint Command Message\n\
# This structure contains the gains to be applied to a joint.\n\
# The controller is a PID with feedforward desired torque:\n\
#\n\
# This message has been carefully constructed to be less\n\
# than 1500 in size when serialized, to accommodate transfer\n\
# UDP.\n\
#\n\
#   k_effort * (\n\
#     kp_position     * ( position - measured_position )       +\n\
#     ki_position     * 1/s * ( position - measured_position ) +\n\
#     kd_position     * s * ( position - measured_position ) +\n\
#     kp_velocity     * ( velocity - measured_velocity )     +\n\
#     effort ) +\n\
#   (1 - k_effort)  * effort_bdi\n\
#\n\
#  Where effort_bdi comes from AtlasSimInterface Dynamics Behavior Library.\n\
#\n\
Header header\n\
\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
float32[] kp_position\n\
float32[] ki_position\n\
float32[] kd_position\n\
float32[] kp_velocity\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
float32[] i_effort_min\n\
float32[] i_effort_max\n\
\n\
uint8 desired_controller_period_ms # max allowed controller update period in milli-seconds simulation time for controller synchronization.  See SynchronizationStatistics.msg for tracking synchronization status.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ec6f3eff0161f4257b808b12bc830c2";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
  static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/ResetControlsResponse";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string status_message\n\
\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reset_bdi_controller);
    stream.next(m.reset_pid_controller);
    stream.next(m.reload_pid_from_ros);
    stream.next(m.atlas_command);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ResetControlsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::ResetControlsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.status_message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ResetControlsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<atlas_msgs::ResetControls> {
  static const char* value() 
  {
    return "132418be2559866cd92987f80ed5ce8a";
  }

  static const char* value(const atlas_msgs::ResetControls&) { return value(); } 
};

template<>
struct DataType<atlas_msgs::ResetControls> {
  static const char* value() 
  {
    return "atlas_msgs/ResetControls";
  }

  static const char* value(const atlas_msgs::ResetControls&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<atlas_msgs::ResetControlsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "132418be2559866cd92987f80ed5ce8a";
  }

  static const char* value(const atlas_msgs::ResetControlsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<atlas_msgs::ResetControlsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/ResetControls";
  }

  static const char* value(const atlas_msgs::ResetControlsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<atlas_msgs::ResetControlsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "132418be2559866cd92987f80ed5ce8a";
  }

  static const char* value(const atlas_msgs::ResetControlsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<atlas_msgs::ResetControlsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/ResetControls";
  }

  static const char* value(const atlas_msgs::ResetControlsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ATLAS_MSGS_SERVICE_RESETCONTROLS_H

