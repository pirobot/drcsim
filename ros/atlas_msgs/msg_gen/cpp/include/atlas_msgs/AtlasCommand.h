/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasCommand.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASCOMMAND_H
#define ATLAS_MSGS_MESSAGE_ATLASCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasCommand_ {
  typedef AtlasCommand_<ContainerAllocator> Type;

  AtlasCommand_()
  : header()
  , position()
  , velocity()
  , effort()
  , kp_position()
  , ki_position()
  , kd_position()
  , kp_velocity()
  , k_effort()
  , i_effort_min()
  , i_effort_max()
  , desired_controller_period_ms(0)
  {
  }

  AtlasCommand_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , effort(_alloc)
  , kp_position(_alloc)
  , ki_position(_alloc)
  , kd_position(_alloc)
  , kp_velocity(_alloc)
  , k_effort(_alloc)
  , i_effort_min(_alloc)
  , i_effort_max(_alloc)
  , desired_controller_period_ms(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  position;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  velocity;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  effort;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kp_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kp_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ki_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  ki_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kd_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kd_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kp_velocity_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kp_velocity;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _k_effort_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  k_effort;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _i_effort_min_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  i_effort_min;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _i_effort_max_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  i_effort_max;

  typedef uint8_t _desired_controller_period_ms_type;
  uint8_t desired_controller_period_ms;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasCommand
typedef  ::atlas_msgs::AtlasCommand_<std::allocator<void> > AtlasCommand;

typedef boost::shared_ptr< ::atlas_msgs::AtlasCommand> AtlasCommandPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasCommand const> AtlasCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a56dd1f50633ad975636160b665384a";
  }

  static const char* value(const  ::atlas_msgs::AtlasCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a56dd1f50633ad9ULL;
  static const uint64_t static_value2 = 0x75636160b665384aULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasCommand";
  }

  static const char* value(const  ::atlas_msgs::AtlasCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Joint Command Message\n\
# This structure contains the gains to be applied to a joint.\n\
# The controller is a PID with feedforward desired torque:\n\
#\n\
# This message has been carefully constructed to be less\n\
# than 1500 in size when serialized, to accommodate transfer\n\
# UDP.\n\
#\n\
#   k_effort * (\n\
#     kp_position     * ( position - measured_position )       +\n\
#     ki_position     * 1/s * ( position - measured_position ) +\n\
#     kd_position     * s * ( position - measured_position ) +\n\
#     kp_velocity     * ( velocity - measured_velocity )     +\n\
#     effort ) +\n\
#   (1 - k_effort)  * effort_bdi\n\
#\n\
#  Where effort_bdi comes from AtlasSimInterface Dynamics Behavior Library.\n\
#\n\
Header header\n\
\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
float32[] kp_position\n\
float32[] ki_position\n\
float32[] kd_position\n\
float32[] kp_velocity\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
float32[] i_effort_min\n\
float32[] i_effort_max\n\
\n\
uint8 desired_controller_period_ms # max allowed controller update period in milli-seconds simulation time for controller synchronization.  See SynchronizationStatistics.msg for tracking synchronization status.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::atlas_msgs::AtlasCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::atlas_msgs::AtlasCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.effort);
    stream.next(m.kp_position);
    stream.next(m.ki_position);
    stream.next(m.kd_position);
    stream.next(m.kp_velocity);
    stream.next(m.k_effort);
    stream.next(m.i_effort_min);
    stream.next(m.i_effort_max);
    stream.next(m.desired_controller_period_ms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasCommand_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "kp_position[]" << std::endl;
    for (size_t i = 0; i < v.kp_position.size(); ++i)
    {
      s << indent << "  kp_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kp_position[i]);
    }
    s << indent << "ki_position[]" << std::endl;
    for (size_t i = 0; i < v.ki_position.size(); ++i)
    {
      s << indent << "  ki_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ki_position[i]);
    }
    s << indent << "kd_position[]" << std::endl;
    for (size_t i = 0; i < v.kd_position.size(); ++i)
    {
      s << indent << "  kd_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kd_position[i]);
    }
    s << indent << "kp_velocity[]" << std::endl;
    for (size_t i = 0; i < v.kp_velocity.size(); ++i)
    {
      s << indent << "  kp_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kp_velocity[i]);
    }
    s << indent << "k_effort[]" << std::endl;
    for (size_t i = 0; i < v.k_effort.size(); ++i)
    {
      s << indent << "  k_effort[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.k_effort[i]);
    }
    s << indent << "i_effort_min[]" << std::endl;
    for (size_t i = 0; i < v.i_effort_min.size(); ++i)
    {
      s << indent << "  i_effort_min[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.i_effort_min[i]);
    }
    s << indent << "i_effort_max[]" << std::endl;
    for (size_t i = 0; i < v.i_effort_max.size(); ++i)
    {
      s << indent << "  i_effort_max[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.i_effort_max[i]);
    }
    s << indent << "desired_controller_period_ms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.desired_controller_period_ms);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASCOMMAND_H

