/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasBehaviorWalkFeedback.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORWALKFEEDBACK_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORWALKFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "atlas_msgs/AtlasBehaviorStepData.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorWalkFeedback_ {
  typedef AtlasBehaviorWalkFeedback_<ContainerAllocator> Type;

  AtlasBehaviorWalkFeedback_()
  : t_step_rem(0.0)
  , current_step_index(0)
  , next_step_index_needed(0)
  , status_flags(0)
  , step_queue_saturated()
  {
  }

  AtlasBehaviorWalkFeedback_(const ContainerAllocator& _alloc)
  : t_step_rem(0.0)
  , current_step_index(0)
  , next_step_index_needed(0)
  , status_flags(0)
  , step_queue_saturated()
  {
    step_queue_saturated.assign( ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> (_alloc));
  }

  typedef double _t_step_rem_type;
  double t_step_rem;

  typedef uint32_t _current_step_index_type;
  uint32_t current_step_index;

  typedef uint32_t _next_step_index_needed_type;
  uint32_t next_step_index_needed;

  typedef uint32_t _status_flags_type;
  uint32_t status_flags;

  typedef boost::array< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> , 4>  _step_queue_saturated_type;
  boost::array< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> , 4>  step_queue_saturated;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasBehaviorWalkFeedback
typedef  ::atlas_msgs::AtlasBehaviorWalkFeedback_<std::allocator<void> > AtlasBehaviorWalkFeedback;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorWalkFeedback> AtlasBehaviorWalkFeedbackPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorWalkFeedback const> AtlasBehaviorWalkFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4bd389e051b01f8e9b15c23ca6b58e8b";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4bd389e051b01f8eULL;
  static const uint64_t static_value2 = 0x9b15c23ca6b58e8bULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasBehaviorWalkFeedback";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# mirrored from AtlasControlTypes.h\n\
float64 t_step_rem\n\
uint32 current_step_index\n\
uint32 next_step_index_needed\n\
uint32 status_flags    # use AtlasBeahviorFeedback/status_flags\n\
atlas_msgs/AtlasBehaviorStepData[4] step_queue_saturated # 4 is hardcoded in AtlasSimInterface library.\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStepData\n\
# multi_step walking trajectory parameters\n\
uint32 step_index              # Step index, matlab style, starting from 1,\n\
                               # monotonically increasing during walking\n\
                               #  resets to 1 if robot leaves walk behaviors\n\
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT\n\
float64 duration               # Step duration, when in doubt, 0.63s is a\n\
                               # good guess.\n\
geometry_msgs/Pose pose        # Foot pose in Atlas world frame\n\
float64 swing_height           # Step apex swing height measured form the\n\
                               # midpoint between the feet.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t_step_rem);
    stream.next(m.current_step_index);
    stream.next(m.next_step_index_needed);
    stream.next(m.status_flags);
    stream.next(m.step_queue_saturated);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasBehaviorWalkFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasBehaviorWalkFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "t_step_rem: ";
    Printer<double>::stream(s, indent + "  ", v.t_step_rem);
    s << indent << "current_step_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.current_step_index);
    s << indent << "next_step_index_needed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.next_step_index_needed);
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "step_queue_saturated[]" << std::endl;
    for (size_t i = 0; i < v.step_queue_saturated.size(); ++i)
    {
      s << indent << "  step_queue_saturated[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> >::stream(s, indent + "    ", v.step_queue_saturated[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORWALKFEEDBACK_H

