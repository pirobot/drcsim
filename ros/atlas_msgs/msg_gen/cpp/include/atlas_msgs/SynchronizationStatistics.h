/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/SynchronizationStatistics.msg */
#ifndef ATLAS_MSGS_MESSAGE_SYNCHRONIZATIONSTATISTICS_H
#define ATLAS_MSGS_MESSAGE_SYNCHRONIZATIONSTATISTICS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace atlas_msgs
{
template <class ContainerAllocator>
struct SynchronizationStatistics_ {
  typedef SynchronizationStatistics_<ContainerAllocator> Type;

  SynchronizationStatistics_()
  : delay_in_step(0.0)
  , delay_in_window(0.0)
  , delay_window_remain(0.0)
  {
  }

  SynchronizationStatistics_(const ContainerAllocator& _alloc)
  : delay_in_step(0.0)
  , delay_in_window(0.0)
  , delay_window_remain(0.0)
  {
  }

  typedef double _delay_in_step_type;
  double delay_in_step;

  typedef double _delay_in_window_type;
  double delay_in_window;

  typedef double _delay_window_remain_type;
  double delay_window_remain;


  typedef boost::shared_ptr< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator>  const> ConstPtr;
}; // struct SynchronizationStatistics
typedef  ::atlas_msgs::SynchronizationStatistics_<std::allocator<void> > SynchronizationStatistics;

typedef boost::shared_ptr< ::atlas_msgs::SynchronizationStatistics> SynchronizationStatisticsPtr;
typedef boost::shared_ptr< ::atlas_msgs::SynchronizationStatistics const> SynchronizationStatisticsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27bc1701ef8ff889822573f985ebb2b6";
  }

  static const char* value(const  ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x27bc1701ef8ff889ULL;
  static const uint64_t static_value2 = 0x822573f985ebb2b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/SynchronizationStatistics";
  }

  static const char* value(const  ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 delay_in_step         # instantaneous delay per simulation step, this must be less than delayMaxPerStep.\n\
float64 delay_in_window       # total delay in current window period.\n\
float64 delay_window_remain   # time left in current window period, before next budget reset.\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.delay_in_step);
    stream.next(m.delay_in_window);
    stream.next(m.delay_window_remain);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SynchronizationStatistics_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::SynchronizationStatistics_<ContainerAllocator> & v) 
  {
    s << indent << "delay_in_step: ";
    Printer<double>::stream(s, indent + "  ", v.delay_in_step);
    s << indent << "delay_in_window: ";
    Printer<double>::stream(s, indent + "  ", v.delay_in_window);
    s << indent << "delay_window_remain: ";
    Printer<double>::stream(s, indent + "  ", v.delay_window_remain);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_SYNCHRONIZATIONSTATISTICS_H

