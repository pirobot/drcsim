/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasSimInterfaceCommand.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASSIMINTERFACECOMMAND_H
#define ATLAS_MSGS_MESSAGE_ATLASSIMINTERFACECOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "atlas_msgs/AtlasBehaviorWalkParams.h"
#include "atlas_msgs/AtlasBehaviorStepParams.h"
#include "atlas_msgs/AtlasBehaviorStandParams.h"
#include "atlas_msgs/AtlasBehaviorManipulateParams.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasSimInterfaceCommand_ {
  typedef AtlasSimInterfaceCommand_<ContainerAllocator> Type;

  AtlasSimInterfaceCommand_()
  : header()
  , behavior(0)
  , walk_params()
  , step_params()
  , stand_params()
  , manipulate_params()
  , k_effort()
  {
  }

  AtlasSimInterfaceCommand_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , behavior(0)
  , walk_params(_alloc)
  , step_params(_alloc)
  , stand_params(_alloc)
  , manipulate_params(_alloc)
  , k_effort(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _behavior_type;
  int32_t behavior;

  typedef  ::atlas_msgs::AtlasBehaviorWalkParams_<ContainerAllocator>  _walk_params_type;
   ::atlas_msgs::AtlasBehaviorWalkParams_<ContainerAllocator>  walk_params;

  typedef  ::atlas_msgs::AtlasBehaviorStepParams_<ContainerAllocator>  _step_params_type;
   ::atlas_msgs::AtlasBehaviorStepParams_<ContainerAllocator>  step_params;

  typedef  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>  _stand_params_type;
   ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>  stand_params;

  typedef  ::atlas_msgs::AtlasBehaviorManipulateParams_<ContainerAllocator>  _manipulate_params_type;
   ::atlas_msgs::AtlasBehaviorManipulateParams_<ContainerAllocator>  manipulate_params;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _k_effort_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  k_effort;

  enum { STAND = 0 };
  enum { USER = 1 };
  enum { FREEZE = 2 };
  enum { STAND_PREP = 3 };
  enum { WALK = 4 };
  enum { STEP = 5 };
  enum { MANIPULATE = 6 };

  typedef boost::shared_ptr< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasSimInterfaceCommand
typedef  ::atlas_msgs::AtlasSimInterfaceCommand_<std::allocator<void> > AtlasSimInterfaceCommand;

typedef boost::shared_ptr< ::atlas_msgs::AtlasSimInterfaceCommand> AtlasSimInterfaceCommandPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasSimInterfaceCommand const> AtlasSimInterfaceCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "afd78cf894b94df9f3ad71fa0e37286b";
  }

  static const char* value(const  ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xafd78cf894b94df9ULL;
  static const uint64_t static_value2 = 0xf3ad71fa0e37286bULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasSimInterfaceCommand";
  }

  static const char* value(const  ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# For interfacing AtlasSimInterface Dynamics Behavior Library\n\
# This ROS message should track behavior commands in AtlasControlInput struct\n\
# inside AtlasSimInterfaceTypes.h.\n\
# With the exception of addition of k_effort to provide user a way to switch\n\
# to/from PID servo control in AtlasPlugin.cpp on a per joint basis.\n\
\n\
Header header\n\
\n\
# permissible values for behavior\n\
int32 STAND             =  0 # stand\n\
int32 USER              =  1 # disable AtlasSimInterface updates, rely on\n\
                             # /atlas/atlas_command or /atlas/joint_commands\n\
int32 FREEZE            =  2 # safety mode\n\
int32 STAND_PREP        =  3 # stand-prep (AtlasSimInterface documentation)\n\
int32 WALK              =  4 # multi-step walk\n\
int32 STEP              =  5 # single step walk\n\
int32 MANIPULATE        =  6 # stand and allows manipulation.\n\
\n\
int32 behavior                # can be one of\n\
                              # USER, FREEZE, STAND_PREP\n\
                              # WALK, STEP, STAND, MANIPULATE\n\
\n\
# multi_step walking trajectory parameters\n\
atlas_msgs/AtlasBehaviorWalkParams walk_params\n\
\n\
# parameters for single_step behavior\n\
atlas_msgs/AtlasBehaviorStepParams step_params\n\
\n\
# parameters for standing behavior\n\
atlas_msgs/AtlasBehaviorStandParams stand_params\n\
\n\
# parameters for stand and manipulate\n\
atlas_msgs/AtlasBehaviorManipulateParams manipulate_params\n\
\n\
# additional vector for transitioning from servo model in AtlasPlugin\n\
# to BDI servo.\n\
\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorWalkParams\n\
# multi_step walking trajectory parameters\n\
atlas_msgs/AtlasBehaviorStepData[4] step_queue\n\
bool use_demo_walk\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStepData\n\
# multi_step walking trajectory parameters\n\
uint32 step_index              # Step index, matlab style, starting from 1,\n\
                               # monotonically increasing during walking\n\
                               #  resets to 1 if robot leaves walk behaviors\n\
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT\n\
float64 duration               # Step duration, when in doubt, 0.63s is a\n\
                               # good guess.\n\
geometry_msgs/Pose pose        # Foot pose in Atlas world frame\n\
float64 swing_height           # Step apex swing height measured form the\n\
                               # midpoint between the feet.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStepParams\n\
# parameters for single_step behavior\n\
atlas_msgs/AtlasBehaviorStepData desired_step\n\
bool use_demo_walk\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStandParams\n\
# stand parameters\n\
int32 placeholder\n\
# etc., more to come\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorManipulateParams\n\
# mirrored from AtlasControlTypes.h\n\
bool use_desired\n\
atlas_msgs/AtlasBehaviorPelvisServoParams desired\n\
bool use_demo_mode\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams\n\
# mirrored from AtlasControlTypes.h\n\
\n\
float64 pelvis_height\n\
float64 pelvis_yaw\n\
float64 pelvis_lat\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.behavior);
    stream.next(m.walk_params);
    stream.next(m.step_params);
    stream.next(m.stand_params);
    stream.next(m.manipulate_params);
    stream.next(m.k_effort);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasSimInterfaceCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasSimInterfaceCommand_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "behavior: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior);
    s << indent << "walk_params: ";
s << std::endl;
    Printer< ::atlas_msgs::AtlasBehaviorWalkParams_<ContainerAllocator> >::stream(s, indent + "  ", v.walk_params);
    s << indent << "step_params: ";
s << std::endl;
    Printer< ::atlas_msgs::AtlasBehaviorStepParams_<ContainerAllocator> >::stream(s, indent + "  ", v.step_params);
    s << indent << "stand_params: ";
s << std::endl;
    Printer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >::stream(s, indent + "  ", v.stand_params);
    s << indent << "manipulate_params: ";
s << std::endl;
    Printer< ::atlas_msgs::AtlasBehaviorManipulateParams_<ContainerAllocator> >::stream(s, indent + "  ", v.manipulate_params);
    s << indent << "k_effort[]" << std::endl;
    for (size_t i = 0; i < v.k_effort.size(); ++i)
    {
      s << indent << "  k_effort[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.k_effort[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASSIMINTERFACECOMMAND_H

