/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/VRCScore.msg */
#ifndef ATLAS_MSGS_MESSAGE_VRCSCORE_H
#define ATLAS_MSGS_MESSAGE_VRCSCORE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace atlas_msgs
{
template <class ContainerAllocator>
struct VRCScore_ {
  typedef VRCScore_<ContainerAllocator> Type;

  VRCScore_()
  : wall_time()
  , sim_time()
  , wall_time_elapsed()
  , sim_time_elapsed()
  , completion_score(0)
  , falls(0)
  , message()
  , task_type(0)
  {
  }

  VRCScore_(const ContainerAllocator& _alloc)
  : wall_time()
  , sim_time()
  , wall_time_elapsed()
  , sim_time_elapsed()
  , completion_score(0)
  , falls(0)
  , message(_alloc)
  , task_type(0)
  {
  }

  typedef ros::Time _wall_time_type;
  ros::Time wall_time;

  typedef ros::Time _sim_time_type;
  ros::Time sim_time;

  typedef ros::Time _wall_time_elapsed_type;
  ros::Time wall_time_elapsed;

  typedef ros::Time _sim_time_elapsed_type;
  ros::Time sim_time_elapsed;

  typedef int32_t _completion_score_type;
  int32_t completion_score;

  typedef int32_t _falls_type;
  int32_t falls;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;

  typedef uint32_t _task_type_type;
  uint32_t task_type;

  enum { TASK_OTHER = 0 };
  enum { TASK_DRIVING = 1 };
  enum { TASK_WALKING = 2 };
  enum { TASK_MANIPULATION = 3 };

  typedef boost::shared_ptr< ::atlas_msgs::VRCScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::VRCScore_<ContainerAllocator>  const> ConstPtr;
}; // struct VRCScore
typedef  ::atlas_msgs::VRCScore_<std::allocator<void> > VRCScore;

typedef boost::shared_ptr< ::atlas_msgs::VRCScore> VRCScorePtr;
typedef boost::shared_ptr< ::atlas_msgs::VRCScore const> VRCScoreConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::VRCScore_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::VRCScore_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::VRCScore_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::VRCScore_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::VRCScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "15d1f218676ad0e9382ec3bd7afd4995";
  }

  static const char* value(const  ::atlas_msgs::VRCScore_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x15d1f218676ad0e9ULL;
  static const uint64_t static_value2 = 0x382ec3bd7afd4995ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::VRCScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/VRCScore";
  }

  static const char* value(const  ::atlas_msgs::VRCScore_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::VRCScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Potential values for task_type\n\
uint32 TASK_OTHER = 0\n\
uint32 TASK_DRIVING = 1\n\
uint32 TASK_WALKING = 2\n\
uint32 TASK_MANIPULATION = 3\n\
# Absolute wall time\n\
time wall_time\n\
# Absolute sim time\n\
time sim_time\n\
# Wall time elapsed since passing the first gate\n\
time wall_time_elapsed\n\
# Sim time elapsed since passing the first gate\n\
time sim_time_elapsed\n\
# How many parts of the task have been accomplished (e.g., gates traversed)\n\
int32 completion_score\n\
# How many damaging falls detected\n\
int32 falls\n\
# Optional message to describe events\n\
string message\n\
# Which type of task\n\
uint32 task_type\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::VRCScore_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.wall_time);
    stream.next(m.sim_time);
    stream.next(m.wall_time_elapsed);
    stream.next(m.sim_time_elapsed);
    stream.next(m.completion_score);
    stream.next(m.falls);
    stream.next(m.message);
    stream.next(m.task_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VRCScore_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::VRCScore_<ContainerAllocator> & v) 
  {
    s << indent << "wall_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.sim_time);
    s << indent << "wall_time_elapsed: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.wall_time_elapsed);
    s << indent << "sim_time_elapsed: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.sim_time_elapsed);
    s << indent << "completion_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.completion_score);
    s << indent << "falls: ";
    Printer<int32_t>::stream(s, indent + "  ", v.falls);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "task_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_VRCSCORE_H

