/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasBehaviorStandParams.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorStandParams_ {
  typedef AtlasBehaviorStandParams_<ContainerAllocator> Type;

  AtlasBehaviorStandParams_()
  : placeholder(0)
  {
  }

  AtlasBehaviorStandParams_(const ContainerAllocator& _alloc)
  : placeholder(0)
  {
  }

  typedef int32_t _placeholder_type;
  int32_t placeholder;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasBehaviorStandParams
typedef  ::atlas_msgs::AtlasBehaviorStandParams_<std::allocator<void> > AtlasBehaviorStandParams;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams> AtlasBehaviorStandParamsPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams const> AtlasBehaviorStandParamsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "569a10f839b2e1ce334950a722d388b4";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x569a10f839b2e1ceULL;
  static const uint64_t static_value2 = 0x334950a722d388b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasBehaviorStandParams";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# stand parameters\n\
int32 placeholder\n\
# etc., more to come\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.placeholder);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasBehaviorStandParams_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> & v) 
  {
    s << indent << "placeholder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.placeholder);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H

