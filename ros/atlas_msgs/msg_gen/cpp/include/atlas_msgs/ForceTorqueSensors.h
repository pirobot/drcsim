/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/ForceTorqueSensors.msg */
#ifndef ATLAS_MSGS_MESSAGE_FORCETORQUESENSORS_H
#define ATLAS_MSGS_MESSAGE_FORCETORQUESENSORS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct ForceTorqueSensors_ {
  typedef ForceTorqueSensors_<ContainerAllocator> Type;

  ForceTorqueSensors_()
  : header()
  , l_foot()
  , r_foot()
  , l_hand()
  , r_hand()
  {
  }

  ForceTorqueSensors_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , l_foot(_alloc)
  , r_foot(_alloc)
  , l_hand(_alloc)
  , r_hand(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _l_foot_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  l_foot;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _r_foot_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  r_foot;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _l_hand_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  l_hand;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _r_hand_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  r_hand;


  typedef boost::shared_ptr< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator>  const> ConstPtr;
}; // struct ForceTorqueSensors
typedef  ::atlas_msgs::ForceTorqueSensors_<std::allocator<void> > ForceTorqueSensors;

typedef boost::shared_ptr< ::atlas_msgs::ForceTorqueSensors> ForceTorqueSensorsPtr;
typedef boost::shared_ptr< ::atlas_msgs::ForceTorqueSensors const> ForceTorqueSensorsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "608f43cae98f77f5fb6cfbbbfa4c9253";
  }

  static const char* value(const  ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x608f43cae98f77f5ULL;
  static const uint64_t static_value2 = 0xfb6cfbbbfa4c9253ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/ForceTorqueSensors";
  }

  static const char* value(const  ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Atlas force torque sensors for the wrists and ankles\n\
Header header\n\
\n\
geometry_msgs/Wrench l_foot\n\
geometry_msgs/Wrench r_foot\n\
geometry_msgs/Wrench l_hand\n\
geometry_msgs/Wrench r_hand\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.l_foot);
    stream.next(m.r_foot);
    stream.next(m.l_hand);
    stream.next(m.r_hand);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ForceTorqueSensors_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::ForceTorqueSensors_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "l_foot: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.l_foot);
    s << indent << "r_foot: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.r_foot);
    s << indent << "l_hand: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.l_hand);
    s << indent << "r_hand: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.r_hand);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_FORCETORQUESENSORS_H

