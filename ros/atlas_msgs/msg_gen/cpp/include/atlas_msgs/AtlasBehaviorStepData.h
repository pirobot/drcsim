/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasBehaviorStepData.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTEPDATA_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTEPDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorStepData_ {
  typedef AtlasBehaviorStepData_<ContainerAllocator> Type;

  AtlasBehaviorStepData_()
  : step_index(0)
  , foot_index(0)
  , duration(0.0)
  , pose()
  , swing_height(0.0)
  {
  }

  AtlasBehaviorStepData_(const ContainerAllocator& _alloc)
  : step_index(0)
  , foot_index(0)
  , duration(0.0)
  , pose(_alloc)
  , swing_height(0.0)
  {
  }

  typedef uint32_t _step_index_type;
  uint32_t step_index;

  typedef uint32_t _foot_index_type;
  uint32_t foot_index;

  typedef double _duration_type;
  double duration;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef double _swing_height_type;
  double swing_height;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasBehaviorStepData
typedef  ::atlas_msgs::AtlasBehaviorStepData_<std::allocator<void> > AtlasBehaviorStepData;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStepData> AtlasBehaviorStepDataPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStepData const> AtlasBehaviorStepDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d310ca2045a49be1648d8958f198af57";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd310ca2045a49be1ULL;
  static const uint64_t static_value2 = 0x648d8958f198af57ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasBehaviorStepData";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# multi_step walking trajectory parameters\n\
uint32 step_index              # Step index, matlab style, starting from 1,\n\
                               # monotonically increasing during walking\n\
                               #  resets to 1 if robot leaves walk behaviors\n\
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT\n\
float64 duration               # Step duration, when in doubt, 0.63s is a\n\
                               # good guess.\n\
geometry_msgs/Pose pose        # Foot pose in Atlas world frame\n\
float64 swing_height           # Step apex swing height measured form the\n\
                               # midpoint between the feet.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.step_index);
    stream.next(m.foot_index);
    stream.next(m.duration);
    stream.next(m.pose);
    stream.next(m.swing_height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasBehaviorStepData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasBehaviorStepData_<ContainerAllocator> & v) 
  {
    s << indent << "step_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.step_index);
    s << indent << "foot_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.foot_index);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "swing_height: ";
    Printer<double>::stream(s, indent + "  ", v.swing_height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTEPDATA_H

