/* Auto-generated by genmsg_cpp for file /home/patrick/catkin_ws/src/drcsim/ros/atlas_msgs/msg/AtlasPositionData.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASPOSITIONDATA_H
#define ATLAS_MSGS_MESSAGE_ATLASPOSITIONDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasPositionData_ {
  typedef AtlasPositionData_<ContainerAllocator> Type;

  AtlasPositionData_()
  : position()
  , velocity()
  {
  }

  AtlasPositionData_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , velocity(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  velocity;


  typedef boost::shared_ptr< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasPositionData_<ContainerAllocator>  const> ConstPtr;
}; // struct AtlasPositionData
typedef  ::atlas_msgs::AtlasPositionData_<std::allocator<void> > AtlasPositionData;

typedef boost::shared_ptr< ::atlas_msgs::AtlasPositionData> AtlasPositionDataPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasPositionData const> AtlasPositionDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasPositionData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasPositionData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "589dbd8c358d253de2ab5441acd36a2b";
  }

  static const char* value(const  ::atlas_msgs::AtlasPositionData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x589dbd8c358d253dULL;
  static const uint64_t static_value2 = 0xe2ab5441acd36a2bULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasPositionData";
  }

  static const char* value(const  ::atlas_msgs::AtlasPositionData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# mirrors AtlasPositionData in AtlasControlTypes.h\n\
geometry_msgs/Vector3 position\n\
geometry_msgs/Vector3 velocity\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasPositionData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasPositionData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasPositionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasPositionData_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASPOSITIONDATA_H

